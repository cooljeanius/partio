# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _partio
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


NONE = _partio.NONE
VECTOR = _partio.VECTOR
FLOAT = _partio.FLOAT
INT = _partio.INT
INDEXEDSTR = _partio.INDEXEDSTR
class ParticleAttribute(_object):
    """A handle for operating on attribbutes of a particle set"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleAttribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleAttribute, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _partio.ParticleAttribute_type_set
    __swig_getmethods__["type"] = _partio.ParticleAttribute_type_get
    if _newclass:type = _swig_property(_partio.ParticleAttribute_type_get, _partio.ParticleAttribute_type_set)
    __swig_setmethods__["count"] = _partio.ParticleAttribute_count_set
    __swig_getmethods__["count"] = _partio.ParticleAttribute_count_get
    if _newclass:count = _swig_property(_partio.ParticleAttribute_count_get, _partio.ParticleAttribute_count_set)
    __swig_setmethods__["name"] = _partio.ParticleAttribute_name_set
    __swig_getmethods__["name"] = _partio.ParticleAttribute_name_get
    if _newclass:name = _swig_property(_partio.ParticleAttribute_name_get, _partio.ParticleAttribute_name_set)
    def __init__(self, *args): 
        """
        __init__(self) -> ParticleAttribute

        Print a summary of particle file
        """
        this = _partio.new_ParticleAttribute(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _partio.delete_ParticleAttribute
    __del__ = lambda self : None;
ParticleAttribute_swigregister = _partio.ParticleAttribute_swigregister
ParticleAttribute_swigregister(ParticleAttribute)

class ParticlesInfo(_object):
    """A set of particles with associated data attributes."""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticlesInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticlesInfo, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def numParticles(*args):
        """
        numParticles(self) -> int

        Returns the number of particles in the set
        """
        return _partio.ParticlesInfo_numParticles(*args)

    def numAttributes(*args):
        """
        numAttributes(self) -> int

        Returns the number of particles in the set
        """
        return _partio.ParticlesInfo_numAttributes(*args)

    def attributeInfo(*args):
        """
        attributeInfo(self, char name) -> ParticleAttribute
        attributeInfo(self, int index) -> ParticleAttribute

        Returns the attribute handle by index
        """
        return _partio.ParticlesInfo_attributeInfo(*args)

    __swig_destroy__ = _partio.delete_ParticlesInfo
    __del__ = lambda self : None;
ParticlesInfo_swigregister = _partio.ParticlesInfo_swigregister
ParticlesInfo_swigregister(ParticlesInfo)

class ParticlesData(ParticlesInfo):
    """A reader for a set of particles."""
    __swig_setmethods__ = {}
    for _s in [ParticlesInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticlesData, name, value)
    __swig_getmethods__ = {}
    for _s in [ParticlesInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticlesData, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def lookupIndexedStr(*args):
        """
        lookupIndexedStr(self, ParticleAttribute attribute, char str) -> int

        Looks up a given indexed string given the index, returns -1 if not found
        """
        return _partio.ParticlesData_lookupIndexedStr(*args)

    def findNPoints(*args):
        """
        findNPoints(self, fixedFloatArray center, int nPoints, float maxRadius) -> PyObject

        Searches for the N nearest points to the center location
        or as many as can be found within maxRadius distance.
        """
        return _partio.ParticlesData_findNPoints(*args)

    def findPoints(*args):
        """
        findPoints(self, fixedFloatArray bboxMin, fixedFloatArray bboxMax) -> PyObject

        Returns the indices of all points within the bounding
        box defined by the two cube corners bboxMin and bboxMax
        """
        return _partio.ParticlesData_findPoints(*args)

    def get(*args):
        """
        get(self, ParticleAttribute attr, ParticleIndex particleIndex) -> PyObject

        Gets attribute data for particleIndex'th particle
        """
        return _partio.ParticlesData_get(*args)

    def indexedStrs(*args):
        """
        indexedStrs(self, ParticleAttribute attr) -> PyObject

        Gets a list of all indexed strings for the given attribute handle
        """
        return _partio.ParticlesData_indexedStrs(*args)

    __swig_destroy__ = _partio.delete_ParticlesData
    __del__ = lambda self : None;
ParticlesData_swigregister = _partio.ParticlesData_swigregister
ParticlesData_swigregister(ParticlesData)

class ParticlesDataMutable(ParticlesData):
    """A writer for a set of particles."""
    __swig_setmethods__ = {}
    for _s in [ParticlesData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticlesDataMutable, name, value)
    __swig_getmethods__ = {}
    for _s in [ParticlesData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticlesDataMutable, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def registerIndexedStr(*args):
        """
        registerIndexedStr(self, ParticleAttribute attribute, char str) -> int

        Registers a string in the particular attribute
        """
        return _partio.ParticlesDataMutable_registerIndexedStr(*args)

    def sort(*args):
        """
        sort(self)

        Prepares data for N nearest neighbor searches using the
        attribute in the file with name 'position'
        """
        return _partio.ParticlesDataMutable_sort(*args)

    def addAttribute(*args):
        """
        addAttribute(self, char attribute, ParticleAttributeType type, int count) -> ParticleAttribute

        Adds a new attribute of given name, type and count. If type is
        partio.VECTOR, then count must be 3
        """
        return _partio.ParticlesDataMutable_addAttribute(*args)

    def addParticle(*args):
        """
        addParticle(self) -> ParticleIndex

        Adds a new particle and returns the index
        """
        return _partio.ParticlesDataMutable_addParticle(*args)

    def addParticles(*args):
        """
        addParticles(self, int count) -> ParticleIterator<(false)>

        Adds count particles and returns the offset to the first one
        """
        return _partio.ParticlesDataMutable_addParticles(*args)

    def set(*args):
        """
        set(self, ParticleAttribute attr, uint64_t particleIndex, PyObject tuple) -> PyObject

        Sets data on a given attribute for a single particle.
        Data must be specified as tuple.
        """
        return _partio.ParticlesDataMutable_set(*args)

    __swig_destroy__ = _partio.delete_ParticlesDataMutable
    __del__ = lambda self : None;
ParticlesDataMutable_swigregister = _partio.ParticlesDataMutable_swigregister
ParticlesDataMutable_swigregister(ParticlesDataMutable)


def create(*args):
  """
    create() -> ParticlesDataMutable

    Create an empty particle array
    """
  return _partio.create(*args)

def read(*args):
  """
    read(char filename) -> ParticlesDataMutable

    Reads a particle set from disk
    """
  return _partio.read(*args)

def readHeaders(*args):
  """
    readHeaders(char filename) -> ParticlesInfo

    Reads a particle set headers from disk
    """
  return _partio.readHeaders(*args)

def _print(*args):
  """
    _print(ParticlesData particles)

    Print a summary of particle file
    """
  return _partio._print(*args)


def write(*args):
  """
    write(char filename, ParticlesData ?, bool ?=False)
    write(char filename, ParticlesData ?)

    Writes a particle set to disk
    """
  return _partio.write(*args)

